---
title: "eds221-morning"
format: html
editor: visual
---

## Functions

```{r}
library(tidyverse)
```

```{r}
double_value <- function(my_dollars) {
  print(2 * my_dollars)
}

double_value(10.13)
```

```{r}
monthly_income <- c(42, 50, 61.75, 89.50)

double_value(monthly_income)
```

Create a function that returns an awesome restaurant name given a cool animal and your favorite food.

```{r}
name_rest <- function(animal, food) {
  print(paste0(animal, food))
}

name_rest(animal = "hawk", food = "pizza")
```

Given a temperature in degrees (F), write a function that converts it to Celsius.

```{r}

convert_f_to_c <- function(temp_f) {
  print((temp_f - 32) * (5 / 9))
}

convert_f_to_c(temp_f = 52)
```

Create a function that given inputs of age and hometown, returns "I am \_ years old, and I'm from\_"

```{r}
age_hometown <- function(age, hometown) {
  print(paste("I am", age, "years old", "and I'm from", hometown))
}

age_hometown(age = 25, hometown = "Bakersfield")
```

```{r}
#You dont always need to put print at the end of the function 
double_value2 <- function(dollars) {
  dollars * 2
}

double_value2(dollars = 10)
```

Print statements and return statements

print: "show me"

return: store this so I can use it later

## Functions with conditionals

```{r}
calculate_animal_age <- function(species, age_human_yr) {
  if (species  == "dog") {
    print(age_human_yr * 7)
   } else if (species == "goat") {
      print(age_human_yr * 4.7)
   } else {
    print("Please enter dog or goat")
  }
}
```

```{r}
calculate_animal_age(species = "dog", age_human_yr = 10)

calculate_animal_age(species = "goat", age_human_yr = 4)
```

Write a function that, given temp in Kelvin, if a user selects "metric" to the scale then return degrees Celsius, or if they select "english" then return in degrees F.

```{r}
tempk_convert <- function(scale, temp_k) {
  if (scale == "metric") {
    print(temp_k - 273.15)
  } else if(scale == "english") {
    print(((temp_k - 273.15) * 1.8) + 32)
  }
}

my_value <- tempk_convert(scale = "metric", temp_k = 47)
```

## Functions

Create a subset within a function and then return something based on that subset

```{r}
dog_choice <- data.frame(dog_name = c("korra", "Bbnjo", "teddy", "waffle", "tallie"),
                         food = c("everything", "salmon", "pancakes", "chicken", "enchiladas"))

```

```{r}
dog_menu <- function(enter_dog_name) {
  dog_subset <- dplyr::filter(dog_choice, dog_name == enter_dog_name)
  print(paste("My name is", dog_subset$dog_name, "and my favorite food is", dog_subset$food))
}
```

```{r}
dog_menu("waffle")
```

## Function with a for loop

```{r}
df_means <- function(df) {
  for (i in seq_along(df)) {
    col_mean <- mean(df[[i]], na.rm = TRUE)
    column_name <- colnames(df[i])
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}
```

```{r}
df_means(df = mtcars)
```

```{r}
df_means(faithful)
```

Create a function to calculate the betz limit:

```{r}
calculate_betz_windpower <- function(air_density,
                                    rotor_radius,
                                    wind_velocity) {
  if (wind_velocity > 130) {
    warning("Whoa that's a pretty high wind speed are you sure?")
  }
  if (rotor_radius <0) {
      stop("Rotor radius must be a pos value (meters)") }
        0.3 * air_density * pi * (rotor_radius ^ 2) * (wind_velocity ^ 3)
}
```

```{r}
calculate_betz_windpower(air_density = 1.2, rotor_radius = 20, wind_velocity = 1020)
```
